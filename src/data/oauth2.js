export const oauth2 = {
  id: "oauth2",
  title: "OAuth 2.0",
  content: `
    <h2>OAuth 2.0</h2>
    <p>OAuth 2.0 is an authorization framework that enables applications to obtain limited access to user accounts on an HTTP service without exposing user credentials.</p>

    <h3>OAuth 2.0 Flow Components</h3>
    
    <h4>Authorization Server</h4>
    <p>The server that authenticates the user and issues access tokens after getting proper authorization. Examples include Google, Facebook, GitHub authorization servers.</p>

    <h4>Access Token</h4>
    <p>A credential that represents the authorization to access protected resources. It's typically a string that the client uses to access the resource server.</p>
    <ul>
      <li><strong>Scope:</strong> Defines the level of access granted</li>
      <li><strong>Expiration:</strong> Tokens have limited lifetime for security</li>
      <li><strong>Format:</strong> Can be JWT or opaque string</li>
    </ul>

    <h4>Refresh Token</h4>
    <p>A long-lived credential used to obtain new access tokens when the current access token expires, without requiring the user to re-authenticate.</p>
    <ul>
      <li><strong>Longer Lifetime:</strong> Typically valid for days, weeks, or months</li>
      <li><strong>Security:</strong> Must be stored securely by the client</li>
      <li><strong>Rotation:</strong> May be rotated when used to obtain new access tokens</li>
    </ul>

    <h3>OAuth 2.0 Grant Types</h3>
    
    <h4>1. Authorization Code Grant</h4>
    <p>Most secure flow for server-side applications. The client receives an authorization code that is exchanged for an access token.</p>
    <div class="code-block">
      <label>FLOW</label>
      <pre>1. User ‚Üí Authorization Server (login)
2. Authorization Server ‚Üí Client (authorization code)
3. Client ‚Üí Authorization Server (code + client secret)
4. Authorization Server ‚Üí Client (access token + refresh token)</pre>
    </div>

    <h4>2. Client Credentials Grant</h4>
    <p>Used for server-to-server authentication where no user interaction is required.</p>
    <div class="code-block">
      <label>FLOW</label>
      <pre>1. Client ‚Üí Authorization Server (client credentials)
2. Authorization Server ‚Üí Client (access token)</pre>
    </div>

    <h4>3. Resource Owner Password Credentials Grant</h4>
    <p>Used when the client is highly trusted. The user provides credentials directly to the client.</p>
    <div class="info-note">
      <strong>‚ö†Ô∏è Security Warning:</strong> This grant type should only be used when other flows are not viable, as it requires the client to handle user credentials.
    </div>

    <h4>4. Implicit Grant (Deprecated)</h4>
    <p>Previously used for browser-based applications, now deprecated in favor of Authorization Code with PKCE.</p>

    <h3>OAuth 2.0 Security Extensions</h3>
    
    <h4>PKCE (Proof Key for Code Exchange)</h4>
    <p>Security extension that prevents authorization code interception attacks, especially important for mobile and single-page applications.</p>
    <ul>
      <li><strong>Code Verifier:</strong> Random string generated by client</li>
      <li><strong>Code Challenge:</strong> SHA256 hash of code verifier</li>
      <li><strong>Verification:</strong> Authorization server verifies the code verifier matches the challenge</li>
    </ul>

    <h3>OAuth 2.0 vs OAuth 1.0</h3>
    <table>
      <thead>
        <tr>
          <th>Aspect</th>
          <th>OAuth 1.0</th>
          <th>OAuth 2.0</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><strong>Complexity</strong></td>
          <td>Complex signature requirements</td>
          <td>Simpler, relies on HTTPS</td>
        </tr>
        <tr>
          <td><strong>Transport Security</strong></td>
          <td>Built-in signature mechanism</td>
          <td>Requires HTTPS</td>
        </tr>
        <tr>
          <td><strong>Token Types</strong></td>
          <td>Single token type</td>
          <td>Access tokens + refresh tokens</td>
        </tr>
        <tr>
          <td><strong>Mobile Support</strong></td>
          <td>Poor</td>
          <td>Better with PKCE</td>
        </tr>
      </tbody>
    </table>

    <h3>Common OAuth 2.0 Scopes</h3>
    <ul>
      <li><strong>openid:</strong> OpenID Connect authentication</li>
      <li><strong>profile:</strong> Access to user profile information</li>
      <li><strong>email:</strong> Access to user email address</li>
      <li><strong>read:</strong> Read-only access to resources</li>
      <li><strong>write:</strong> Write access to resources</li>
    </ul>

    <div class="reference-links">
      <h4>üìö References</h4>
      <ul>
        <li><a href="https://tools.ietf.org/html/rfc6749" target="_blank">RFC 6749 - OAuth 2.0 Authorization Framework</a></li>
        <li><a href="https://oauth.net/2/" target="_blank">OAuth 2.0 Official Website</a></li>
        <li><a href="https://tools.ietf.org/html/rfc7636" target="_blank">RFC 7636 - PKCE Extension</a></li>
      </ul>
    </div>
  `
}; 